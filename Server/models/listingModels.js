<<<<<<< HEAD
const mongoose = require('mongoose');
const { ObjectId } = mongoose.Schema.Types;

const clothingListingSchema = new mongoose.Schema({
    _id: {
        type: ObjectId,
        required: true,
    },
    name: {
        type: String,
        required: true,
    },
    size: {
        type: String,
        required: true,
        enum: ["XS", "S", "M", "L", "XL", "XXL"], // Example of predefined size options
    },
    title: {
        type: String,
        required: true,
    },
    price: {
        type: Number,
        required: true,
        min: 0, // Ensure price is non-negative
    },
    brand: {
        type: String,
        required: true,
    },
    quantity: {
        type: Number,
        required: true,
        min: 0, // Ensure quantity is non-negative
    },
    condition: {
        type: String,
        required: true,
        enum: ["PW", "SW", "NW", "BN"], // Options for condition: Pre-Worn, Slightly Worn, Nearly Worn, Brand New
    },
    description: {
        type: String,
        required: true,
    },
    tags: {
        type: [String], // Array of strings
        default: [], // Default to an empty array
    },
    platform: {
        type: String,
        required: true,
        enum: ["depop", "ebay", "grailed"], // Options for platform
    },
});

const Listing = mongoose.model("listings", clothingListingSchema);

module.exports = {
    Listing
}


// class Listing {
//     constructor(name, size, title, price, brand, count, cond, charCount, tagCount, plat) {

//         //User Input via API call
//         this.name = name;  //Product title
//         this.size = size;  //Size
//         this.type = title;  //Product category (shirt, pants, etc.)
//         this.price = price; //Price
//         this.brand = brand; //Brand
//         this.count = count; //Quantity in Stock
//         this.condition = cond; //Used condition
//         this.platform = plat;
//         //Generated by methods
//         this.desciption = this.generateDescrip(charCount);  //AI Generated Desciption
//         this.tags = this.generateTags(tagCount); //AI Generated Hashtags
//     }

//     generateDescrip(charCount) {
//         let description = "";

//         //Use OPEN AI to generate
//         return description;
//     }

//     generateTags(tagCount) {
//         let tags = [];

//         //Use OPENAi to generate

//         return tags;
//     }
// }

// class DePopListing extends Listing {
//     constructor(n, s, t, p, d, b, c, cond, age) {
//         super(n, s, t, p, d, b, c, cond);

//         this.age = age; //Year Item was made
//     }

//     //Methods

// }
// class EbayListing extends Listing {
//     constructor(n, s, t, p, d, b, c, cond, team, player, gender) {
//         super(n, s, t, p, d, b, c, cond);

//         this.team = team; //Team apperael
//         this.player = player; //Player from team
//         this.gender = gender  //Gender
//     }

//     //Methods

// }
// class GrailedListing extends Listing {
//     constructor(n, s, t, p, d, b, c, cond, gender, fp) {
//         super(n, s, t, p, d, b, c, cond);

//         this.gender = gender  //Gender
//         this.floorPrice = fp;
//     }

//     //Methods

// }
=======
class Listing {
    constructor(name, size, title, price, brand, count, cond, charCount, tagCount) {

        //User Input via API call
        this.name = name;  //Product title
        this.size = size;  //Size
        this.title = title;  //Product category (shirt, pants, etc.)
        this.price = price; //Price
        this.brand = brand; //Brand
        this.count = cond; //Quantity in Stock
        this.condition = cond; //Used condition

        //Generated by methods
        this.desciption = this.generateDescrip(charCount);  //AI Generated Desciption
        this.tags = this.generateTags(tagCount); //AI Generated Hashtags
    }

    generateDescrip(charCount) {
        let description = "";

        //Use OPEN AI to generate
        return description;
    }

    generateTags(tagCount) {
        let tags = [];

        //Use OPENAi to generate

        return tags;
    }
}

class DePopListing extends Listing {
    constructor(n, s, t, p, d, b, c, cond, age) {
        super(n, s, t, p, d, b, c, cond);

        this.age = age; //Year Item was made
    }

    //Methods

}
class EbayListing extends Listing {
    constructor(n, s, t, p, d, b, c, cond, team, player, gender) {
        super(n, s, t, p, d, b, c, cond);

        this.team = team; //Team apperael
        this.player = player; //Player from team
        this.gender = gender  //Gender
    }

    //Methods

}
class GrailedListing extends Listing {
    constructor(n, s, t, p, d, b, c, cond, gender, fp) {
        super(n, s, t, p, d, b, c, cond);

        this.gender = gender  //Gender
        this.floorPrice = fp;
    }

    //Methods

}
>>>>>>> c1d47f4c7a34dee73dfd800f8c8c982d0d427887

const mongoose = require("mongoose");

const GrailedSchema = mongoose.Schema({
    title: {
        type: String,
        required: true,
    },
    size: {
        type: String,
        required: true,
    },  //Size,
    catergory: {
        type: String,
        required: true,
    },   //Product category (shirt, pants, etc.)
    price: {
        type: Double,
        required: true,
    },   //Price
    brand: {
        type: String,
        required: true,
    },  //Brand Name
    count: {
        type: int,
        required: true,
    },  //Quantity in Stock
    condition: {
        type: String,
        required: true,
    },
    gender: {
        type: String,
        requried: true,
    },
    floorPrice: {
        type: Double,
        required: false,
    }
}, {
    collection: "listings"
}
);


const DePopListing = mongoose.Schema({
    firstname: {
        type: String,
        required: true,
    },
    lastname: {
        type: String,
        required: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        match: /.+\@.+\..+/ // Simple regex for email validation
    },
    username: {
        type: String,
        required: true,
        unique: true,
    },
    password: {
        type: String,
        required: true,
        minlength: 6 // Minimum password length
    }
}, {
    collection: "listings"
}
);

const EbayListing = mongoose.Schema({
    firstname: {
        type: String,
        required: true,
    },
    lastname: {
        type: String,
        required: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        match: /.+\@.+\..+/ // Simple regex for email validation
    },
    username: {
        type: String,
        required: true,
        unique: true,
    },
    password: {
        type: String,
        required: true,
        minlength: 6 // Minimum password length
    }
}, {
    collection: "listings"
}
);


const GrailedListing = mongoose.model("listigs", GrailedSchema);


module.exports = {
    GrailedListing,

}
// class Listing {
//     constructor(n, s, t, p, b, c, cond, charCount, tagCount) {

//         //User Input via API call
//         this.name = n;  //Product title
//         this.size = s;  //Size
//         this.type = t;  //Product category (shirt, pants, etc.)
//         this.price = p; //Price
//         this.brand = b; //Brand
//         this.count = c; //Quantity in Stock
//         this.condition = cond; //Used condition

//         //Generated by methods
//         this.desciption = this.generateDescrip(charCount);  //AI Generated Desciption
//         this.tags = this.generateTags(tagCount); //AI Generated Hashtags
//     }

//     generateDescrip(charCount) {
//         let d = "";

//         //Use OPEN AI to generate
//         return d;
//     }

//     generateTags(tagCount) {
//         let t = [];

//         //Use OPENAi to generate

//         return t;
//     }
// }

// class DePopListing extends Listing {
//     constructor(n, s, t, p, d, b, c, cond, age) {
//         super(n, s, t, p, d, b, c, cond);

//         this.age = age; //Year Item was made
//     }

//     //Methods

// }
// class EbayListing extends Listing {
//     constructor(n, s, t, p, d, b, c, cond, team, player, gender) {
//         super(n, s, t, p, d, b, c, cond);

//         this.team = team; //Team apperael
//         this.player = player; //Player from team
//         this.gender = gender  //Gender
//     }

//     //Methods

// }
// class GrailedListing extends Listing {
//     constructor(n, s, t, p, d, b, c, cond, gender, fp) {
//         super(n, s, t, p, d, b, c, cond);

//         this.gender = gender  //Gender
//         this.floorPrice = fp; //Floor Price that grailed asks for
//     }

//     //Methods

// }